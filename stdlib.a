// Zero page

// Each enabled bit sets read and write on the processor port (ZPProcessorPort) otherwise the value can just be read.
// Default: $2F, %101111
.const ZPProcessorPortDDR				= $00 
// Bits 0-2: Configuration for memory areas $A000-$BFFF, $D000-$DFFF and $E000-$FFFF. Values:
// %x00: RAM visible in all three areas.
// %x01: RAM visible at $A000-$BFFF and $E000-$FFFF.
// %x10: RAM visible at $A000-$BFFF// KERNAL ROM visible at $E000-$FFFF.
// %x11: BASIC ROM visible at $A000-$BFFF// KERNAL ROM visible at $E000-$FFFF.
// %0xx: Character ROM visible at $D000-$DFFF. (Except for the value %000, see above.)
// %1xx: I/O area visible at $D000-$DFFF. (Except for the value %100, see above.)
// Bit 3: Datasette output signal level.
// Bit 4: Datasette button status// 0 = One or more of PLAY, RECORD, F.FWD or REW pressed// 1 = No button is pressed.
// Bit 5: Datasette motor control// 0 = On// 1 = Off.
// Default: $37, %110111
.const ZPProcessorPort					= $01

// $02 - $06 are unused (apparently).

// $07 - $2a are only really used during BASIC execution.

// By default contains $0801
.const ZPStartBasicLo					= $2b
.const ZPStartBasicHi					= $2c

.const ZPStartVariableLo				= $2d
.const ZPStartVariableHi				= $2e

.const ZPStartArrayVariableLo			= $2f
.const ZPStartArrayVariableHi			= $30

.const ZPEndArrayVariableLo			= $31
.const ZPEndArrayVariableHi			= $32

.const ZPStartStringVariableLo			= $33
.const ZPStartStringVariableHi			= $34

.const ZPCurrentStringVariableLo		= $35
.const ZPCurrentStringVariableHi		= $36

.const ZPEndBasicLo					= $37
.const ZPEndBasicHi					= $38

// $39 - $72 are only really used during BASIC execution.

// $73 - $8a
.const ZPChrGet						= $73

// $8b - $8f are only really used during BASIC execution.

// Also used for datasette status
.const ZPSTVariable					= $90

.const ZPStopKeyIndicator				= $91
.const ZPDatasetteTiming				= $92
.const ZPLoadVerify					= $93
.const ZPSerialBusCacheStatus			= $94
.const ZPSerialBusCache				= $95
.const ZPDatasetteEndOfTape			= $96
.const ZPRS232XYTemp					= $97
.const ZPNumFilesOpen					= $98
.const ZPCurrentInputDevice			= $99
.const ZPCurrentOutputDevice			= $9a
.const ZPDatasetteParity				= $9b
.const ZPDatasetteByteReady			= $9c
.const ZPDisplaySystemErrorSwitch		= $9d
.const ZPRS232OutByte					= $9e
.const ZPDatasetteNameWriteCount		= $9f
.const ZPTimeOfDay						= $a0		// $a0 - a2
.const ZPEOISerialBusSwitch			= $a3
.const ZPSerialBusBuffer				= $a4
.const  ZPSerialBusBitCounter			= $a5
.const ZPDatasetteBufferOffset			= $a6
.const ZPRS232BusBuffer				= $a7
.const ZPRS232BusBitCounter			= $a8
.const ZPRS232StopBitSwitch			= $a9
.const ZPRS232ByteBuffer				= $aa
.const ZPRS232Parity					= $ab
.const ZPAddressToSave					= $ac		// $ac - ad
.const ZPAddressToLoad					= $ae		// $ae - af

// $b0 - $b1 unknown

.const ZPDatasetteBufferLo				= $b2
.const ZPDatasetteBufferHo				= $b3
.const ZPRS232BitCounter				= $b4
.const ZPRS232BitBuffer				= $b5

// $b7 - $c4 Various file operation working area

.const ZPPrevKeyPressed				= $c5
.const ZPKeyBufferLength				= $c6

// $c7 - $ca Various cursor operations

.const ZPCurrentKeyPressed				= $cb

// $cc - $f6 Various cursor, screen and keyboard conversion tables

// $f7 - $fa RS232 input and output buffers

// $fb - $fe unused

.const ProcessorStack					= $0100		// $0100 - $01ff

// $0200 - $0292 Various keyboard buffers and buffers used by BASIC

// $0293 - $02ff RS232 and datasette control and buffers

// $0300 - $0312 Used by BASIC

// $0313 unused

.const DefaultIRQServiceRoutine		= $ea31
.const MinimalIRQServiceRoutine		= $ea81
.const IRQServiceRoutineLo				= $0314
.const IRQServiceRoutineHi				= $0315

// Default = $fe66
.const BRKServiceRoutineLo				= $0316
.const BRKServiceRoutineHi				= $0317

.const DefaultNMIServiceRoutine		= $fe47
.const NMIServiceRoutineLo				= $0318
.const NMIServiceRoutineHo				= $0319

// $031a - $0333 Various vectors for standard routines like open, close, load, save etc

// Default $f4a5
.const LoadRoutineLo					= $0330
.const LoadRoutineHi					= $0331

// Default $f5ed
.const SaveRoutineLo					= $0332
.const SaveRoutineHi					= $0333

// $0334 - $033b unused

// $033c - $03fb Datasette buffer

// $03fc - $03ff unused



// Special memory sections

.const BASICSTART= $0801			// Default is memory PEEK(43) = 1 and PEEK(44) = 8
.const SCREENRAM = $0400
.const SPRITEFRAME = $07f8
.const BASICROM  = $A000
.const VIC       = $D000
.const SID       = $D400
.const COLORRAM  = $D800
.const COLOURRAM = $D800
.const CIA1      = $DC00
.const CIA2      = $DD00
.const KERNALROM = $E000

// KERNAL routines

.const ACPTR   = $FFA5
.const CHKIN   = $FFC6
.const CHKOUT  = $FFC9
.const CHRIN   = $FFCF
.const CHROUT  = $FFD2
.const CIOUT   = $FFA8
.const CINT    = $FF81
.const CLALL   = $FFE7
.const CLOSE   = $FFC3
.const CLRCHN  = $FFCC
.const GETIN   = $FFE4
.const IOBASE  = $FFF3
.const IOINIT  = $FF84
.const LISTEN  = $FFB1
.const LOAD    = $FFD5
.const MEMBOT  = $FF9C
.const MEMTOP  = $FF99
.const OPEN    = $FFC0
.const PLOT    = $FFF0
.const RAMTAS  = $FF87
.const RDTIM   = $FFDE
.const READST  = $FFB7
.const RESTOR  = $FF8A
.const SAVE    = $FFD8
.const SCNKEY  = $FF9F
.const SCREEN  = $FFED
.const SECOND  = $FF93
.const SETLFS  = $FFBA
.const SETMSG  = $FF90
.const SETNAM  = $FFBD
.const SETTIM  = $FFDB
.const SETTMO  = $FFA2
.const STOP    = $FFE1
.const TALK    = $FFB4
.const TKSA    = $FF96
.const UDTIM   = $FFEA
.const UNLSN   = $FFAE
.const UNTLK   = $FFAB
.const VECTOR  = $FF8D

// Default = $fe43
.const KERNALNMIServiceRoutineLo		= $fffa
.const KERNALNMIServiceRoutineHo		= $fffb

// Default = $fce2
.const KERNALColdStartResetLo			= $fffc
.const KERNALColdStartResetHi			= $fffd

// Default = $ff48
.const KERNALIRQServiceRoutineLo		= $fffe
.const KERNALIRQServiceRoutineHi		= $ffff

// Specific locations within the custom chips

// VIC II Video chip
.const VIC2Sprite0X					= $d000
.const VIC2Sprite0Y					= $d001
.const VIC2Sprite1X					= $d002
.const VIC2Sprite1Y					= $d003
.const VIC2Sprite2X					= $d004
.const VIC2Sprite2Y					= $d005
.const VIC2Sprite3X					= $d006
.const VIC2Sprite3Y					= $d007
.const VIC2Sprite4X					= $d008
.const VIC2Sprite4Y					= $d009
.const VIC2Sprite5X					= $d00a
.const VIC2Sprite5Y					= $d00b
.const VIC2Sprite6X					= $d00c
.const VIC2Sprite6Y					= $d00d
.const VIC2Sprite7X					= $d00e
.const VIC2Sprite7Y					= $d00f

// Each bit is the X MSB for each sprite.
.const VIC2SpriteXMSB					= $d010

// Bits 0-2 Vertical scroll.
// 3 Screen height 0 = 24 rows last line 246 (f6) : 1 = 25 rows last line $fa (250)
// 4 0 = Screen off 1 = Screen on
// 5 0 = Text mode 1 = Bitmap mode
// 6 1 = Extended background mode on
// 7 Read: Current raster line position bit 9. Write: Bit 9 of raster line position to generate next interrupt.
// Default: $1b, %00011011
.const VIC2ScreenControlV				= $d011

// Read: Current raster line position.
// Write: Raster line position to generate next interrupt.
.const VIC2Raster						= $d012
.const VIC2LightPenX					= $d013
.const VIC2LightPenY					= $d014
.const VIC2SpriteEnable				= $d015

// Bits 0-2 Horizontal scroll.
// 3 Screen width 0 = 38 columns 1 = 40 columns
// 4 1 = Multicolour on
// 5-7 Unused
// Default: $c8, %11001000
.const VIC2ScreenControlH				= $d016

// Each bit sets the double height enable for each sprite.
.const VIC2SpriteDoubleHeight			= $d017

// In text mode:
// Bits 1-3 Character memory location * $0800 (2048) inside current VIC bank selected by $dd00.
// In VIC bank 0 and 2 bits %010 and %011 select character ROM except in ULTIMAX mode.
// In bitmap mode:
// Bit 3 Bitmap memory location * $2000 (8192) inside current VIC bank selected by $dd00.
// Bits 4-7 Screen memory location * $1000 (1024)  inside current VIC bank selected by $dd00.
.const VIC2MemorySetup					= $d018

// Read:
// Bit 0: 1 = Current raster line is equal to the raster line which is set to generate an interrupt.
// Bit 1: 1 = Sprite-background collision event.
// Bit 2: 1 = Sprite-sprite collision event.
// Bit 3: 1 = Light pen signal received.
// Bit 7: 1 = An event that might generate an interrupt happened.
// Write:
// Bit 0: 0 = Ack raster interrupt.
// Bit 1: 0 = Ack sprite-background collision interrupt.
// Bit 2: 0 = Ack sprite-sprite collision interrupt.
// Bit 3: 0 = Ack light pen signal interrupt.
.const VIC2InterruptStatus				= $d019

// Bit 0: 1 = Raster interrupt enabled.
// Bit 1: 1 = Sprite-background interrupt enabled.
// Bit 2: 1 = Sprite-sprite interrupt enabled.
// Bit 3: 1 = Light pen interrupt enabled.
.const VIC2InterruptControl				= $d01a

// Each bit sets the sprite background priority for each sprite.
// 0 = Sprite drawn in front of screen contents.
// 1 = Sprite drawn behind of screen contents.
.const VIC2SpritePriority				= $d01b

// Each bit sets multicolour for each sprite.
// 0 = Sprite is single colour.
// 1 = Sprite is multicolour.
.const VIC2SpriteMulticolour			= $d01c

// Each bit sets the double width enable for each sprite.
.const VIC2SpriteDoubleWidth			= $d01d

// Read: For each set bit X the sprite X collided with another sprite.
// Write: For each set bit X allow further sprite-sprite collisions.
.const VIC2SpriteSpriteCollision		= $d01e

// Read: For each set bit X the sprite X collided with the background.
// Write: For each set bit X allow further sprite-background collisions.
.const VIC2SpriteBackgroundCollision	= $d01f

.const VIC2BorderColour				= $d020
.const VIC2ScreenColour				= $d021

.const VIC2ExtraBackgroundColour1		= $d022
.const VIC2ExtraBackgroundColour2		= $d023
.const VIC2ExtraBackgroundColour3		= $d024

.const VIC2ExtraSpriteColour1			= $d025
.const VIC2ExtraSpriteColour2			= $d025

.const VIC2Sprite0Colour				= $d027
.const VIC2Sprite1Colour				= $d028
.const VIC2Sprite2Colour				= $d029
.const VIC2Sprite3Colour				= $d02a
.const VIC2Sprite4Colour				= $d02b
.const VIC2Sprite5Colour				= $d02c
.const VIC2Sprite6Colour				= $d02d
.const VIC2Sprite7Colour				= $d02e


// SID Audio chip

.const SIDVoice1FreqLo					= $d400		// Write only
.const SIDVoice1FreqHi					= $d401		// Write only
.const SIDVoice1PulseWidthLo			= $d402		// Write only
.const SIDVoice1PulseWidthHi			= $d403		// Write only

// Bit 0: 0 = Voice off, release cycle. 1 = Voice on do attack-decay-sustain.
// Bit 1: 1 = Synchronization enable.
// Bit 2: 1 = Ting modulation enable.
// Bit 3: 1 = Disable voice.
// Bit 4: 1 = Triangle waveform enable.
// Bit 5: 1 = Saw waveform enable.
// Bit 6: 1 = Rectangle waveform enable.
// Bit 7: 1 = Noise waveform enable.
.const SIDVoice1Control				= $d404		// Write only

// Bits 0-3 Decay length:
//	%0000, 0: 6 ms.
//	%0001, 1: 24 ms.
//	%0010, 2: 48 ms.
//	%0011, 3: 72 ms.
//	%0100, 4: 114 ms.
//	%0101, 5: 168 ms.
//	%0110, 6: 204 ms.
//	%0111, 7: 240 ms.
//	%1000, 8: 300 ms.
//	%1001, 9: 750 ms.
//	%1010, 10: 1.5 s.
//	%1011, 11: 2.4 s.
//	%1100, 12: 3 s.
//	%1101, 13: 9 s.
//	%1110, 14: 15 s.
//	%1111, 15: 24 s.
// Bits 4-7 Decay length:
//	%0000, 0: 2 ms.
//	%0001, 1: 8 ms.
//	%0010, 2: 16 ms.
//	%0011, 3: 24 ms.
//	%0100, 4: 38 ms.
//	%0101, 5: 56 ms.
//	%0110, 6: 68 ms.
//	%0111, 7: 80 ms.
//	%1000, 8: 100 ms.
//	%1001, 9: 250 ms.
//	%1010, 10: 500 ms.
//	%1011, 11: 800 ms.
//	%1100, 12: 1 s.
//	%1101, 13: 3 s.
//	%1110, 14: 5 s.
//	%1111, 15: 8 s.
.const SIDVoice1AttackDecay			= $d405		// Write only

// Bits 0-3 Release length.
//	%0000, 0: 6 ms.
//	%0001, 1: 24 ms.
//	%0010, 2: 48 ms.
//	%0011, 3: 72 ms.
//	%0100, 4: 114 ms.
//	%0101, 5: 168 ms.
//	%0110, 6: 204 ms.
//	%0111, 7: 240 ms.
//	%1000, 8: 300 ms.
//	%1001, 9: 750 ms.
//	%1010, 10: 1.5 s.
//	%1011, 11: 2.4 s.
//	%1100, 12: 3 s.
//	%1101, 13: 9 s.
//	%1110, 14: 15 s.
//	%1111, 15: 24 s.
// Bits #4-#7: Sustain volume.
.const SIDVoice1SustainRelease			= $d406		// Write only

.const SIDVoice2FreqLo					= $d407		// Write only
.const SIDVoice2FreqHi					= $d408		// Write only
.const SIDVoice2PulseWidthLo			= $d409		// Write only
.const SIDVoice2PulseWidthHi			= $d40a		// Write only
.const SIDVoice2Control				= $d40b		// Write only
.const SIDVoice2AttackDecay			= $d40c		// Write only
.const SIDVoice2SustainRelease			= $d40d		// Write only

.const SIDVoice3FreqLo					= $d40e		// Write only
.const SIDVoice3FreqHi					= $d40f		// Write only
.const SIDVoice3PulseWidthLo			= $d410		// Write only
.const SIDVoice3PulseWidthHi			= $d411		// Write only
.const SIDVoice3Control				= $d412		// Write only
.const SIDVoice3AttackDecay			= $d413		// Write only
.const SIDVoice3SustainRelease			= $d414		// Write only

.const SIDFilterCutoffFreqLo			= $d415		// Write only
.const SIDFilterCutoffFreqHi			= $d416		// Write only

// Bit 0: 1 = Voice #1 filtered.
// Bit 1: 1 = Voice #2 filtered.
// Bit 2: 1 = Voice #3 filtered.
// Bit 3: 1 = External voice filtered.
// Bits 4-7: Filter resonance.
.const SIDFilterControl				= $d417		// Write only

// Bits 0-3: Volume.
// Bit 4: 1 = Low pass filter enabled.
// Bit 5: 1 = Band pass filter enabled.
// Bit 6: 1 = High pass filter enabled.
// Bit 7: 1 = Voice #3 disabled.
.const SIDVolumeFilter					= $d418		// Write only

// Paddle is selected by memory address $dd00
.const SIDPaddleX						= $d419		// Read only

// Paddle is selected by memory address $dd00
.const SIDPaddleY						= $d41a		// Read only

.const SIDVoice3WaveformOutput			= $d41b		// Read only
.const SIDVoice3ADSROutput				= $d41c		// Read only



// CIA1

// Port A read:
// Bit 0: 0 = Port 2 joystick up pressed.
// Bit 1: 0 = Port 2 joystick down pressed.
// Bit 2: 0 = Port 2 joystick right pressed.
// Bit 3: 0 = Port 2 joystick left pressed.
// Bit 4: 0 = Port 2 joystick fire pressed.
// Write:
// Bit x: 0 = Select keyboard matrix column x.
// Bits 6-7: Paddle selection// %01 = Paddle #1// %10 = Paddle #2.
.const CIA1KeyboardColumnJoystickA		= $dc00

// Port B, keyboard matrix rows and joystick #1. Bits:
// Bit x: 0 = A key is currently being pressed in keyboard matrix row #x, in the column selected at memory address $DC00.
// Bit 0: 0 = Port 1 joystick up pressed.
// Bit 1: 0 = Port 1 joystick down pressed.
// Bit 2: 0 = Port 1 joystick right pressed.
// Bit 3: 0 = Port 1 joystick left pressed.
// Bit 4: 0 = Port 1 joystick fire pressed.
.const CIA1KeyboardRowsJoystickB		= $dc01

// Each enabled bit sets read and write on CIA1KeyboardColumnJoystickA otherwise the value can just be read.
.const CIA1PortADDR					= $dc02

// Each enabled bit sets read and write on CIA1KeyboardRowsJoystickB otherwise the value can just be read.
.const CIA1PortBDDR					= $dc03

.const CIA1TimerALo					= $dc04
.const CIA1TimerAHi					= $dc05

.const CIA1TimerBLo					= $dc06
.const CIA1TimerBHi					= $dc07

.const CIA1ToD10thSecsBCD				= $dc08
.const CIA1ToDSecsBCD					= $dc09
.const CIA1ToDMinsBCD					= $dc0a
.const CIA1ToDHoursBCD					= $dc0b
.const CIA1SerialShift					= $dc0c

// Interrupt control and status register.
// Read bits:
// Bit 0: 1 = Timer A underflow occurred.
// Bit 1: 1 = Timer B underflow occurred.
// Bit 2: 1 = TOD is equal to alarm time.
// Bit 3: 1 = A complete byte has been received into or sent from serial shift register.
// Bit 4: Signal level on FLAG pin, datasette input.
// Bit 7: An interrupt has been generated.
// Write bits:
// Bit 0: 1 = Enable interrupts generated by timer A underflow.
// Bit 1: 1 = Enable interrupts generated by timer B underflow.
// Bit 2: 1 = Enable TOD alarm interrupt.
// Bit 3: 1 = Enable interrupts generated by a byte having been received/sent via serial shift register.
// Bit 4: 1 = Enable interrupts generated by positive edge on FLAG pin.
// Bit 7: Fill bit// bits 0-6, that are set to 1, get their values from this bit// bits 0-6, that are set to 0, are left unchanged.
.const CIA1InterruptControl			= $dc0d

// Timer A control register. Bits:
// Bit 0: 0 = Stop timer// 1 = Start timer.
// Bit 1: 1 = Indicate timer underflow on port B bit 6.
// Bit 2: 0 = Upon timer underflow, invert port B bit 6// 1 = upon timer underflow, generate a positive edge on port B bit 6 for 1 system cycle. 
// Bit 3: 0 = Timer restarts upon underflow// 1 = Timer stops upon underflow.
// Bit 4: 1 = Load start value into timer.
// Bit 5: 0 = Timer counts system cycles// 1 = Timer counts positive edges on CNT pin.
// Bit 6: Serial shift register direction// 0 = Input, read// 1 = Output, write.
// Bit 7: TOD speed// 0 = 60 Hz// 1 = 50 Hz.
.const CIA1TimerAControl				= $dc0e

// Timer B control register. Bits:
// Bit 0: 0 = Stop timer// 1 = Start timer.
// Bit 1: 1 = Indicate timer underflow on port B bit 7.
// Bit 2: 0 = Upon timer underflow, invert port B bit 7// 1 = upon timer underflow, generate a positive edge on port B bit 7 for 1 system cycle.
// Bit 3: 0 = Timer restarts upon underflow// 1 = Timer stops upon underflow.
// Bit 4: 1 = Load start value into timer.
// Bits 5-6: %00 = Timer counts system cycles// %01 = Timer counts positive edges on CNT pin// %10 = Timer counts underflows of timer A// %11 = Timer counts underflows of timer A occurring along with a positive edge on CNT pin.
// Bit 7: 0 = Writing into TOD registers sets TOD// 1 = Writing into TOD registers sets alarm time.
.const CIA1TimerBControl				= $dc0f


// CIA2. Mostly the same as CIA1 except for VIC bank, no datasette, RS232 and generates NMI instead of IRQ.

// Bits 0-1: VIC bank. Values:
// %00, 0: Bank 3, $C000-$FFFF, 49152-65535.
// %01, 1: Bank 2, $8000-$BFFF, 32768-49151.
// %10, 2: Bank 1, $4000-$7FFF, 16384-32767.
// %11, 3: Bank 0, $0000-$3FFF, 0-16383.
// Bit 2: RS232 TXD line, output bit.
// Bit 3: Serial bus ATN OUT// 0 = High// 1 = Low.
// Bit 4: Serial bus CLOCK OUT// 0 = High// 1 = Low.
// Bit 5: Serial bus DATA OUT// 0 = High// 1 = Low.
// Bit 6: Serial bus CLOCK IN// 0 = High// 1 = Low.
// Bit 7: Serial bus DATA IN// 0 = High// 1 = Low.
.const CIA2PortASerialBusVICBank		= $dd00


// Read bits:
// Bit 0: RS232 RXD line, input bit.
// Bit 3: RS232 RI line.
// Bit 4: RS232 DCD line.
// Bit 5: User port H pin.
// Bit 6: RS232 CTS line// 1 = Sender is ready to send.
// Bit 7: RS232 DSR line// 1 = Receiver is ready to receive.
// Write bits:
// Bit 1: RS232 RTS line. 1 = Sender is ready to send.
// Bit 2: RS232 DTR line. 1 = Receiver is ready to receive.
// Bit 3: RS232 RI line.
// Bit 4: RS232 DCD line.
// Bit 5: User port H pin.
.const CIA2PortBRS232					= $dd01

// Each enabled bit sets read and write on CIA2PortASerialBusVICBank otherwise the value can just be read.
.const CIA2PortADDR					= $dd02

// Each enabled bit sets read and write on CIA2PortBRS232 otherwise the value can just be read.
.const CIA2PortBDDR					= $dd03

.const CIA2TimerALo					= $dd04
.const CIA2TimerAHi					= $dd05

.const CIA2TimerBLo					= $dd06
.const CIA2TimerBHi					= $dd07

.const CIA2ToD10thSecsBCD				= $dd08
.const CIA2ToDSecsBCD					= $dd09
.const CIA2ToDMinsBCD					= $dd0a
.const CIA2ToDHoursBCD					= $dd0b
.const CIA2SerialShift					= $dd0c

// Non-maskable interrupt control and status register.
// Read bits:
// Bit 0: 1 = Timer A underflow occurred.
// Bit 1: 1 = Timer B underflow occurred.
// Bit 2: 1 = TOD is equal to alarm time.
// Bit 3: 1 = A complete byte has been received into or sent from serial shift register.
// Bit 4: Signal level on FLAG pin.
// Bit 7: An non-maskable interrupt has been generated.
// Write bits:
// Bit 0: 1 = Enable non-maskable interrupts generated by timer A underflow.
// Bit 1: 1 = Enable non-maskable interrupts generated by timer B underflow.
// Bit 2: 1 = Enable TOD alarm non-maskable interrupt.
// Bit 3: 1 = Enable non-maskable interrupts generated by a byte having been received/sent via serial shift register.
// Bit 4: 1 = Enable non-maskable interrupts generated by positive edge on FLAG pin.
// Bit 7: Fill bit// bits 0-6, that are set to 1, get their values from this bit// bits 0-6, that are set to 0, are left unchanged.
.const CIA2InterruptControl			= $dd0d

// Timer A control register. Bits:
// Bit 0: 0 = Stop timer// 1 = Start timer.
// Bit 1: 1 = Indicate timer underflow on port B bit 6.
// Bit 2: 0 = Upon timer underflow, invert port B bit 6// 1 = upon timer underflow, generate a positive edge on port B bit 6 for 1 system cycle. 
// Bit 3: 0 = Timer restarts upon underflow// 1 = Timer stops upon underflow.
// Bit 4: 1 = Load start value into timer.
// Bit 5: 0 = Timer counts system cycles// 1 = Timer counts positive edges on CNT pin.
// Bit 6: Serial shift register direction// 0 = Input, read// 1 = Output, write.
// Bit 7: TOD speed// 0 = 60 Hz// 1 = 50 Hz.
.const CIA2TimerAControl				= $dd0e

// Timer B control register. Bits:
// Bit 0: 0 = Stop timer// 1 = Start timer.
// Bit 1: 1 = Indicate timer underflow on port B bit 7.
// Bit 2: 0 = Upon timer underflow, invert port B bit 7// 1 = upon timer underflow, generate a positive edge on port B bit 7 for 1 system cycle.
// Bit 3: 0 = Timer restarts upon underflow// 1 = Timer stops upon underflow.
// Bit 4: 1 = Load start value into timer.
// Bits 5-6: %00 = Timer counts system cycles// %01 = Timer counts positive edges on CNT pin// %10 = Timer counts underflows of timer A// %11 = Timer counts underflows of timer A occurring along with a positive edge on CNT pin.
// Bit 7: 0 = Writing into TOD registers sets TOD// 1 = Writing into TOD registers sets alarm time.
.const CIA2TimerBControl				= $dd0f
